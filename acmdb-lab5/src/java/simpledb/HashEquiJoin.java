package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Join {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        super(p, child1, child2);
    }

    HashMap<Field, ArrayList<Tuple>> m = new HashMap<>();
    transient Iterator<Tuple> cur = null;

    @Override
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        m.clear();
        while (children[0].hasNext()) {
            Tuple t = children[0].next();
            Field f = t.getField(p.getField1());
//            m.getOrDefault(f, new ArrayList<>()).add(t);
            ArrayList<Tuple> a = m.getOrDefault(f, new ArrayList<>());
            a.add(t);
            m.put(f, a);
        }
    }

    @Override
    public void rewind() throws DbException, TransactionAbortedException {
        super.rewind();
        cur = null;
    }

    @Override
    protected boolean nx() throws TransactionAbortedException, DbException {
        if (cur != null && cur.hasNext()) {
            t1 = cur.next();
            return true;
        } else {
            while (children[1].hasNext()) {
                t2 = children[1].next();
                ArrayList<Tuple> a = m.get(t2.getField(p.getField2()));
                if (a == null) continue;
                cur = a.iterator();
                return nx();
            }
        }
        return false;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    
}
